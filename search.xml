<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[docker指南]]></title>
    <url>%2Fdocker-guide%2F</url>
    <content type="text"><![CDATA[使用容器已经半年多了，这期间完成了公司业务的容器化，遇到问题的时候习惯了使用搜索引擎，有很多时候搜的是同一个问题，总是有一种健忘的感觉，这使我非常恼火，现在把自己遇到的问题整理出来，下次查找就方便了…… 何为容器 容器（Container）是一种轻量级、可移植、自包含的软件打包技术，使应用程序可以在几乎任何地方以相同的方式运行。 我们常说的docker是一种容器引擎，不过容器引擎不单单只有docker，还有CoreOS的rkt，只不过docker的普及率高而已。Container这个单词有集装箱和容器两个意思，docker的logo很形象—就是一堆集装箱。 docker的基本概念镜像（Image）Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。镜像具有分层存储的特征，这还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。镜像的定制实际上就是定制每一层所添加的配置、文件。如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么镜像构建透明性的问题、版本管理问题就都会解决。这个脚本就是 Dockerfile。 容器（Container）镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 数据卷（Volume）、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。 仓库（Repository）镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。 docker的优点环境一致性能够可靠一致地部署应用程序而不必考虑环境的情况。这样一来，不再需要人工对每台服务器进行配置，一次部署，随处可用。 专注于生产力让开发人员从环境问题的坑中解脱出来，专注于开发，提高了生产力。 版本控制借助容器，您可以跟踪应用程序代码的版本及其依赖关系。Docker 容器映像包含一个清单文件 (Dockerfile)，使用此文件可以轻松维护和跟踪容器的版本、检查不同版本间的差异以及回滚到之前的版本。 docker的基本操作启动容器启动容器有两种方式，一种是基于镜像新建一个容器并启动，另外一个是将在终止状态（stopped）的容器重新启动。 停止容器删除容器进入容器查看容器123root@free:~# docker run -d --name www -p 8080:80 nginxdd3afcf8b607ab0e1e99d3d0dd924e52d5ac79db6b16464b3d6fea18c4fdf61croot@free:~# docker ps 进入容器内部 root@free:~# docker exec -it www /bin/bash 有一个奇葩的需求，我需要经常使用一个安装了wget和vi的容器，先安装 root@dd3afcf8b607:/# apt-get updateroot@dd3afcf8b607:/# apt-get install wgetroot@dd3afcf8b607:/# apt-get install vim root@free:~# docker login提交一个存在的容器root@free:~# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESdd3afcf8b607 nginx “nginx -g ‘daemon …” 12 minutes ago Up 12 minutes 0.0.0.0:8080-&gt;80/tcp www668c75b412a8 nginx “nginx -g ‘daemon …” 4 months ago Up 2 months 0.0.0.0:80-&gt;80/tcp nginx5b6e03f039a3 523613/apache-php56 “docker-php-entryp…” 4 months ago Up 3 months 80/tcp khgrouproot@free:~# docker commit dd3afcf8b607 523613/write-nginxsha256:4fa177cfd6764f8778a35791d0b7f9dd1045a5d8dbb09c548955fe0484c10810root@free:~# docker push 523613/write-nginxThe push refers to a repository [docker.io/523613/write-nginx]24803c7db14e: Pushed3ff93588120e: Mounted from library/nginx24ee0a3fd4b9: Mounted from library/nginxd626a8ad97a1: Mounted from 523613/php71latest: digest: sha256:524fad30b39215ded86c76765acdd59e583b860aabfe616a749d982f91929925 size: 1160 参考文章https://yeasy.gitbooks.io/docker_practice/content/https://amazonaws-china.com/cn/what-are-containers/]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VirtualBox 扩容]]></title>
    <url>%2Flinux-4%2F</url>
    <content type="text"><![CDATA[最近我在本地搭建php7环境的时候，源码安装多次失败，最后发现是磁盘空间不足，于是又走上了给虚拟机扩容的老路，以前为了安装oracle给虚拟机扩过一次，时间长就忘了，这次扩容的时候查了好多资料，实在是麻烦，痛定思痛把修改过程记录下来，以后再修改也方便一点。记录的是Windows环境下的虚拟机扩容打开cmd切换至VirtualBox的安装目录，vmdk格式需要先转换成vdi格式，已经是vdi可以略过此步123VBoxManage clonehd &quot;x.vmdk&quot; &quot;x.vdi&quot; --format vdiVBoxManage.exe list hdds 此命令找出相应目录虚拟机的UUID VBoxManage modifyhd UUID --resize 20480 扩展空间至20G 目前完成虚拟机硬盘扩容，要让虚拟机内的系统空间增加，还需要在相应的系统内增加空间.我的系统是centos7,进入系统 fdisk /dev/sda 在提示框内输入n,新建一个硬盘，剩下的用默认设置p，分区号也是默认，接下来是输入起始扇区和结束扇区，均选择默认值。最后w保存，reboot系统。随后进入系统，123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109[root@Live ~]# mkfs.ext4 /dev/sda3 //将分区格式化为ext4格式 mke2fs 1.42.9 (28-Dec-2013)Filesystem label=OS type: LinuxBlock size=4096 (log=2)Fragment size=4096 (log=2)Stride=0 blocks, Stripe width=0 blocks1191360 inodes, 4763648 blocks238182 blocks (5.00%) reserved for the super userFirst data block=0Maximum filesystem blocks=2153775104146 block groups32768 blocks per group, 32768 fragments per group8160 inodes per groupSuperblock backups stored on blocks: 32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 4096000Allocating group tables: doneWriting inode tables: doneCreating journal (32768 blocks): doneWriting superblocks and filesystem accounting information: done[root@Live ~]# pvcreate /dev/sda3 //创建新的物理分区WARNING: ext4 signature detected on /dev/sda3 at offset 1080. Wipe it? [y/n]: y Wiping ext4 signature on /dev/sda3. Physical volume &quot;/dev/sda3&quot; successfully created[root@Live ~]# vgdisplay --- Volume group --- VG Name centos //记录此内容 System ID Format lvm2 Metadata Areas 1 Metadata Sequence No 3 VG Access read/write VG Status resizable MAX LV 0 Cur LV 2 Open LV 2 Max PV 0 Cur PV 1 Act PV 1 VG Size 7.51 GiB PE Size 4.00 MiB Total PE 1922 Alloc PE / Size 1912 / 7.47 GiB Free PE / Size 10 / 40.00 MiB VG UUID n6XfrB-iWJa-3Lsc-glaO-tE37-d9P1-eKpieJ[root@Live ~]# vgextend centos /dev/sda3 //向卷组中添加物理卷 Volume group &quot;centos&quot; successfully extended[root@Live ~]# lvdisplay --- Logical volume --- LV Path /dev/centos/swap LV Name swap VG Name centos LV UUID SNi80z-q0p4-CjL1-qHd5-n59x-aq8f-mFTjwh LV Write Access read/write LV Creation host, time localhost.localdomain, 2016-10-20 13:22:13 +0800 LV Status available # open 2 LV Size 820.00 MiB Current LE 205 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 8192 Block device 253:1 --- Logical volume --- LV Path /dev/centos/root LV Name root VG Name centos LV UUID CJkJui-UKtm-tTzu-UUyY-W40j-gpcK-FMq3Mn LV Write Access read/write LV Creation host, time localhost.localdomain, 2016-10-20 13:22:14 +0800 LV Status available # open 1 LV Size 6.67 GiB //根据大小判定/dev/centos/root即是根分区 Current LE 1707 Segments 1 Allocation inherit Read ahead sectors auto - currently set to 8192 Block device 253:0[root@Live ~]# lvextend /dev/centos/root /dev/sda3 //动态在线扩展磁盘空间 Size of logical volume centos/root changed from 6.67 GiB (1707 extents) to 24.84 GiB (6358 extents). Logical volume root successfully resized.[root@Live ~]# resize2fs /dev/centos/root //刷新分区容量resize2fs 1.42.9 (28-Dec-2013)resize2fs: Bad magic number in super-block while trying to open /dev/centos/rootCouldn&apos;t find valid filesystem superblock.如果报错则是因为你的某些分区使用的是xfs的文件系统，执行 xfs_growfs /dev/centos/root 刷新逻辑分区即可[root@Live ~]# xfs_growfs /dev/centos/rootmeta-data=/dev/mapper/centos-root isize=256 agcount=4, agsize=436992 blks = sectsz=512 attr=2, projid32bit=1 = crc=0 finobt=0data = bsize=4096 blocks=1747968, imaxpct=25 = sunit=0 swidth=0 blksnaming =version 2 bsize=4096 ascii-ci=0 ftype=0log =internal bsize=4096 blocks=2560, version=2 = sectsz=512 sunit=0 blks, lazy-count=1realtime =none extsz=4096 blocks=0, rtextents=0data blocks changed from 1747968 to 6510592 最后reboot重启一下即可！]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux命令一]]></title>
    <url>%2Flinux-1%2F</url>
    <content type="text"><![CDATA[tar记得我刚接触linux时，安装软件下载的都是后缀为tar.gz、tar.bz2等类型的压缩文件，每次解压缩的时候，都要在网上搜索一番，感觉这些压缩文件的逼格非常高。好记性不如烂笔头，以后搜索过的问题都整理出来，方便自己的同时，也可以为遇到相同问题的朋友们提供帮助。tar是打包命令，仅仅是打包整理，并没有压缩功能，但是可以调用gzip、bzip2进行压缩处理。参数：-c 创建包-x 解压包-v 显示处理过程-f 目标文件，其后必须紧跟 目标文件-j 调用 bzip2 进行解压缩-z 调用 gzip 进行解压缩-t 列出包中的文件-r 向压缩归档文件末尾追加文件-u 更新原压缩包中的文件 1234567[root@Test test]# tar -cvf note/photoswipe.tar photoswipe 将当前目录（即test目录）下的photoswipe打包并显示处理过程,存放到note目录[root@Test test]# tar -zcvf note/photoswipe.tar.gz photoswipe 使用 gzip 压缩存放到note目录[root@Test test]# tar -jcvf note/photoswipe.tar.bz2 photoswipe 使用 bzip2 压缩存放到note目录（报错时，需要安装bzip2）[root@Test note]# tar -tf photoswipe.tar 列出包中的文件[root@Test note]# tar -rf photoswipe.tar index.php 追加index.php到photoswipe.tar 使用-uf亦可[root@Test note]# tar -zxvf photoswipe.tar.gz 解压photoswipe.tar.gz到当前目录[root@Test note]# tar -jxf photoswipe.tar.bz2 解压photoswipe.tar.bz2到当前目录 注意分辨好压缩格式，解压的时候使用正确的解压命令就好了。测试初步感觉bzip2格式压缩比更高，压缩文件更小。 rpmrpm 是软件包管理工具，可以处理rpm、yum、apt等方式安装的软件，对于源码安装的（make make install）就无能为力啦。对于源码安装的卸载方式也记录下来：源码安装一般下载后缀为tar.gz或tar.bz2等格式的压缩包进入解压后的目录安装：./configure 配置make 编译make install 安装卸载时只需在原解压目录make uninstall 或 手动删除 即可 下面进入正题，主要记录的是rpm 12345678[root@Test test]# rpm -q gd q就是 --query 查询是否安装gd[root@Test test]# rpm -qa 查询所有软件[root@Test test]# rpm -qa | grep gd 查询出所有软件后，使用管道，grep 含有gd的软件 可以加 -i 参数 忽略大小写[root@Test test]# rpm -ql gd 查询gd软件安装到什么地方[root@Test test]# rpm -qi gd 查询gd软件的详细信息[root@Test test]# rpm -ivh gd 安装gd软件 --nodeps 不考虑依赖关系 --force 是强制了 安装时一般这两个经常连用[root@Test test]# rpm -e gd 卸载gd软件 报错时可以加上--nodeps 即可正常卸载]]></content>
      <categories>
        <category>system</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VIM操作技巧]]></title>
    <url>%2Flinux-3%2F</url>
    <content type="text"><![CDATA[使用vim有一段时间了，现在记录部分操作技巧： 1.查找当前光标所在的单词，都出现在什么位置 匹配当前光标所在的单词，#（上一个）或*（下一个）键 2.复制当前单词 ye可复制当前的单词；y$可以复制当前光标位置到行尾 3.大小写转换 先按v键，然后移动光标选择需要转换的部分，gU可以变成大写，gu变成小写 4.自动补齐 在INSERT模式下，输入一个词的开头，按ctrl+n或ctrl+p即可显示出全文中相关的单词，非常方便 5.关于程序注释 添加注释时，使用块模式 ctrl+v进入块选择模式，上下选择需要加注释的部分，再按大写的I进入行首输入模式，输入注释符号比如#，按两次ESC，此时所有选中的行就都加上注释了 去掉注释 ctrl+v进入块选择模式，上下左右选择需要去掉注释的部分，再按d，就去掉注释了 如未说明，则均在一般模式执行]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux定时任务]]></title>
    <url>%2Flinux-2%2F</url>
    <content type="text"><![CDATA[最近在做一个SHELL脚本，要求每月1号执行一次。 不管是SHELL脚本，还是定时任务，都是刚接触。今天先记录下定时任务的解决过程，shell脚本的总结等测试无误后写出来。 root以及其他用户可以使用 crontab -e 命令添加定时任务 crontab -e 命令会使用vi打开一个临时文件，保存后会以当前用户为文件名存放在/var/spool/cron/文件夹下 例如我以 test 用户登录系统 crontab -e12345#每分钟执行一次test.sh脚本*/1 * * * * /home/test/test.sh#每月1号凌晨6点执行一次test.sh脚本0 6 1 * * /home/test/test.sh 保存后会在/var/spool/cron/文件夹下生成test文件 等了好几分钟，test的脚本日志也没内容 tail -n 5 /var/log/cron 查看定时服务脚本文件显示已执行 问题出在脚本无执行权限 chmod 755 /home/test/test.sh 可以正常执行了。 观察log文件发现报错sqlplus: command not found 添加当前用户的环境变量最便捷有效 source /home/test/.bash_profile 问题解决]]></content>
      <categories>
        <category>crontab</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
